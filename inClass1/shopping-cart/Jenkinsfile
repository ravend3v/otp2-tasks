pipeline {
  agent any

  tools {
    dotnetsdk '.NET 9'
  }

  environment {
    PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
    PROJECT_DIR = "inClass1/shopping-cart"
    IMAGE_NAME = "eliasoj/shopping-cart"
    TAG = "${env.BUILD_NUMBER ?: 'latest'}"
    IS_UNIX = "${isUnix()}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Test') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            def commands = [
              restore: env.IS_UNIX == 'true' ? 'dotnet restore src/shopping-cart.csproj' : 'dotnet restore src\\shopping-cart.csproj',
              build: env.IS_UNIX == 'true' ? 'dotnet build src/shopping-cart.csproj -c Release --no-restore' : 'dotnet build src\\shopping-cart.csproj -c Release --no-restore',
              cleanReports: env.IS_UNIX == 'true' ? 'rm -rf reports/ShoppingCart.Tests && mkdir -p reports/ShoppingCart.Tests' : 'if exist reports\\ShoppingCart.Tests rmdir /s /q reports\\ShoppingCart.Tests && mkdir reports\\ShoppingCart.Tests',
              test: env.IS_UNIX == 'true' ? 
                'dotnet test tests/ShoppingCart.Tests/ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory reports/ShoppingCart.Tests /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../reports/ShoppingCart.Tests/coverage.xml' :
                'dotnet test tests\\ShoppingCart.Tests\\ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory reports\\ShoppingCart.Tests /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=..\\..\\reports\\ShoppingCart.Tests\\coverage.xml'
            ]
            
            if (env.IS_UNIX == 'true') {
              sh "${commands.restore}"
              sh "${commands.build}"
              sh "${commands.cleanReports}"
              sh "${commands.test}"
            } else {
              bat "${commands.restore}"
              bat "${commands.build}"
              bat "${commands.cleanReports}"
              bat "${commands.test}"
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            docker.build("${IMAGE_NAME}:${TAG}", ".").with {
              docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS_ID}") {
                it.push()
              }
            }
          }
        }
      }
    }
    
    stage('Generate Coverage Report') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            def coverageCmd = env.IS_UNIX == 'true' ?
              'dotnet tool restore && dotnet tool run reportgenerator -reports:reports/ShoppingCart.Tests/coverage*.xml -targetdir:reports/ShoppingCart.Tests -reporttypes:Html;Clover' :
              'dotnet tool restore && dotnet tool run reportgenerator -reports:reports\\ShoppingCart.Tests\\coverage*.xml -targetdir:reports\\ShoppingCart.Tests -reporttypes:"Html;Clover"'
            
            if (env.IS_UNIX == 'true') {
              sh "if ls reports/ShoppingCart.Tests/coverage*.xml 1> /dev/null 2>&1; then ${coverageCmd}; else echo 'No coverage files found'; fi"
            } else {
              bat "if exist reports\\ShoppingCart.Tests\\coverage.xml (${coverageCmd}) else (echo No coverage.xml found)"
            }
          }
        }
      }
    }
  }

  post {
    always {
      dir("${env.PROJECT_DIR}") {
        archiveArtifacts artifacts: 'src/bin/**,reports/**', allowEmptyArchive: true
        
        xunit tools: [[$class: 'MSTestJunitHudsonTestType', pattern: 'reports/**/*.trx']], 
              thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0'], 
                         [$class: 'SkippedThreshold', unstableThreshold: '0']], 
              skipNoTestFiles: true

        script {
          try {
            step([$class: 'CloverPublisher', cloverReportDir: 'reports/ShoppingCart.Tests', cloverReportFileName: 'Clover.xml'])
          } catch (err) {
            echo "Clover publish failed: ${err}"
            currentBuild.result = 'UNSTABLE'
          }
        }

        publishHTML([
          allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true,
          reportDir: 'reports/ShoppingCart.Tests', reportFiles: 'index.html',
          reportName: 'Code Coverage Report'
        ])
      }
    }
  }
}
