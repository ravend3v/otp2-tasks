pipeline {
  agent any

  tools {
    dotnetsdk '.NET 9'
  }

  environment {
    PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
    PROJECT_DIR = "inClass1/shopping-cart"
    IMAGE_NAME = "eliasoj/shopping-cart"
    TAG = "${env.BUILD_NUMBER ?: 'latest'}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Restore') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet restore src/shopping-cart.csproj'
            } else {
              bat 'dotnet restore src\\shopping-cart.csproj'
            }
          }
        }
      }
    }

    stage('Build') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet build src/shopping-cart.csproj -c Release --no-restore'
            } else {
              bat 'dotnet build src\\shopping-cart.csproj -c Release --no-restore'
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            // Run tests and collect coverage using Coverlet (via built-in data collector)
            // Output TRX into tests/**/TestResults and coverage in cobertura format.
            if (isUnix()) {
              sh 'dotnet test tests/ShoppingCart.Tests/ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory tests/ShoppingCart.Tests/TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=tests/ShoppingCart.Tests/TestResults/coverage.xml'
            } else {
              bat 'dotnet test tests\\ShoppingCart.Tests\\ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory tests\\ShoppingCart.Tests\\TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=tests\\ShoppingCart.Tests\\TestResults\\coverage.xml'
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            def built = docker.build("${IMAGE_NAME}:${TAG}", ".")
            docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS_ID}") {
              built.push()
            }
          }
        }
      }
    }
    
    stage('Generate Coverage Report') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            // Use ReportGenerator (dotnet tool) to convert cobertura xml to an HTML report
            if (isUnix()) {
              sh 'dotnet tool restore || true'
              sh 'dotnet tool run reportgenerator -reports:tests/**/TestResults/**/coverage.xml -targetdir:tests/ShoppingCart.Tests/TestResults/CoverageReport -reporttypes:Html;Cobertura'
            } else {
              bat 'dotnet tool restore || echo tool restore failed'
              bat 'dotnet tool run reportgenerator -reports:tests\\**\\TestResults\\**\\coverage.xml -targetdir:tests\\ShoppingCart.Tests\\TestResults\\CoverageReport -reporttypes:Html;Cobertura'
            }
          }
        }
      }
    }
  }

  post {
    always {
      dir("${env.PROJECT_DIR}") {
        script {
          // Archive build artifacts and raw test results
          archiveArtifacts artifacts: 'src/bin/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'tests/**/TestResults.trx', allowEmptyArchive: true
          archiveArtifacts artifacts: 'tests/**/TestResults/coverage.xml', allowEmptyArchive: true
          archiveArtifacts artifacts: 'tests/**/TestResults/CoverageReport/**', allowEmptyArchive: true

          // Publish test results using the xUnit plugin (TRX/MSTest)
          // Requires the xUnit plugin installed on Jenkins
          xunit tools: [[$class: 'MSTestJunitHudsonTestType', pattern: 'tests/**/TestResults/*.trx']],
                thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0'], [$class: 'SkippedThreshold', unstableThreshold: '0']],
                skipNoTestFiles: true

          // Publish Cobertura coverage data (requires Cobertura plugin)
          // This will generate coverage trends in Jenkins
          cobertura coberturaReportFile: 'tests/**/TestResults/coverage.xml', autoUpdateHealth: false, failUnhealthy: false, failUnstable: false

          // Publish the HTML coverage report (requires HTML Publisher plugin)
          publishHTML([allowMissing: false,
                       alwaysLinkToLastBuild: true,
                       keepAll: true,
                       reportDir: 'tests/ShoppingCart.Tests/TestResults/CoverageReport',
                       reportFiles: 'index.html',
                       reportName: 'Code Coverage Report'])
        }
      }
    }
  }
}
