pipeline {
  agent any

  tools {
    dotnetsdk '.NET 9'
  }

  environment {
    PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
    PROJECT_DIR = "inClass1/shopping-cart"
    IMAGE_NAME = "eliasoj/shopping-cart"
    TAG = "${env.BUILD_NUMBER ?: 'latest'}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Restore') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
              // Show report folder contents before archiving/publishing
              if (isUnix()) {
                sh 'echo "Pre-publish reports listing:"; ls -la reports/ShoppingCart.Tests || true'
              } else {
                bat 'echo %CD% & dir reports\\ShoppingCart.Tests || echo no reports dir'
              }
            if (isUnix()) {
              sh 'dotnet restore src/shopping-cart.csproj'
            } else {
              bat 'dotnet restore src\\shopping-cart.csproj'
            }
          }
        }
      }
    }

    stage('Build') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet build src/shopping-cart.csproj -c Release --no-restore'
            } else {
              bat 'dotnet build src\\shopping-cart.csproj -c Release --no-restore'
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            // Clean previous test results
            if (isUnix()) {
              sh 'rm -rf reports/ShoppingCart.Tests || true'
              sh 'mkdir -p reports/ShoppingCart.Tests || true'
            } else {
              bat 'if exist reports\\ShoppingCart.Tests rmdir /s /q reports\\ShoppingCart.Tests || echo No old reports'
              bat 'mkdir reports\\ShoppingCart.Tests || echo reports directory exists'
            }
            // Run tests and produce TRX + OpenCover coverage XML
            if (isUnix()) {
              sh 'dotnet test tests/ShoppingCart.Tests/ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory reports/ShoppingCart.Tests /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=reports/ShoppingCart.Tests/coverage.xml'
            } else {
              bat 'dotnet test tests\\ShoppingCart.Tests\\ShoppingCart.Tests.csproj --verbosity minimal --logger "trx;LogFileName=TestResults.trx" --results-directory reports\\ShoppingCart.Tests /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=reports\\ShoppingCart.Tests\\coverage.xml'
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            def built = docker.build("${IMAGE_NAME}:${TAG}", ".")
            docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS_ID}") {
              built.push()
            }
          }
        }
      }
    }
    
    stage('Generate Coverage Report') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            // Generate HTML and Clover coverage reports using ReportGenerator
            if (isUnix()) {
              // Show report directory and run ReportGenerator if coverage exists
              sh 'echo "Working dir: $(pwd)"; ls -la reports/ShoppingCart.Tests || true'
              sh '''
                if ls reports/ShoppingCart.Tests/coverage*.xml 1> /dev/null 2>&1; then
                  dotnet tool restore || true
                  dotnet tool run reportgenerator -reports:reports/ShoppingCart.Tests/coverage*.xml -targetdir:reports/ShoppingCart.Tests -reporttypes:Html;Clover
                  echo "ReportGenerator output:"; ls -la reports/ShoppingCart.Tests || true
                else
                  echo "No coverage files found, skipping report generation"
                fi
              '''
            } else {
              // Windows: list the reports folder, check for the exact coverage.xml and run ReportGenerator
              bat 'echo %CD% & dir reports\\ShoppingCart.Tests || echo no reports dir'
              bat '''
                if exist reports\\ShoppingCart.Tests\\coverage.xml (
                  dotnet tool restore || echo tool restore failed
                  dotnet tool run reportgenerator -reports:reports\\ShoppingCart.Tests\\coverage*.xml -targetdir:reports\\ShoppingCart.Tests -reporttypes:Html;Clover
                  echo ReportGenerator output:
                  dir reports\\ShoppingCart.Tests
                ) else (
                  echo No coverage.xml found in reports\\ShoppingCart.Tests, skipping report generation
                )
              '''
            }
          }
        }
      }
    }
  }

  post {
    always {
      dir("${env.PROJECT_DIR}") {
        script {
          // Archive build and test artifacts
          archiveArtifacts artifacts: 'src/bin/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true

          // Publish TRX test results via xUnit plugin
          xunit tools: [[$class: 'MSTestJunitHudsonTestType', pattern: 'reports/**/*.trx']], thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0'], [$class: 'SkippedThreshold', unstableThreshold: '0']], skipNoTestFiles: true


          // Publish Clover coverage
          try {
            step([$class: 'CloverPublisher', cloverReportDir: 'reports/ShoppingCart.Tests', cloverReportFileName: 'Clover.xml'])
          } catch (err) {
            echo "Clover publish failed: ${err}"
            currentBuild.result = 'UNSTABLE'
          }

          // Publish the HTML coverage report (requires HTML Publisher plugin)
          publishHTML([allowMissing: false,
                       alwaysLinkToLastBuild: true,
                       keepAll: true,
                       reportDir: 'reports/ShoppingCart.Tests',
                       reportFiles: 'index.html',
                       reportName: 'Code Coverage Report'])
        }
      }
    }
  }
}
