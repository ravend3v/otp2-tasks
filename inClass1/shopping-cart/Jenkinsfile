pipeline {
  agent any

  tools {
    dotnetsdk '.NET 9'
  }

  environment {
    PATH = "C:\\Program Files\\Docker\\Docker\\resources\\bin;${env.PATH}"
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Hub'
    PROJECT_DIR = "inClass1/shopping-cart"
    IMAGE_NAME = "eliasoj/shopping-cart"
    TAG = "${env.BUILD_NUMBER ?: 'latest'}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Restore') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet restore src/shopping-cart.csproj'
            } else {
              bat 'dotnet restore src\\shopping-cart.csproj'
            }
          }
        }
      }
    }

    stage('Build') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet build src/shopping-cart.csproj -c Release --no-restore'
            } else {
              bat 'dotnet build src\\shopping-cart.csproj -c Release --no-restore'
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            if (isUnix()) {
              sh 'dotnet test tests/ShoppingCart.Tests/ShoppingCart.Tests.csproj --no-build --verbosity minimal'
            } else {
              bat 'dotnet test tests\\ShoppingCart.Tests\\ShoppingCart.Tests.csproj --no-build --verbosity minimal'
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        dir("${env.PROJECT_DIR}") {
          script {
            def built = docker.build("${IMAGE_NAME}:${TAG}", ".")
            docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS_ID}") {
              built.push()
            }
          }
        }
      }
    }
  }

  post {
    always {
      dir("${env.PROJECT_DIR}") {
        archiveArtifacts artifacts: 'src/bin/**', allowEmptyArchive: true
        archiveArtifacts artifacts: 'tests/**/TestResults.trx', allowEmptyArchive: true
        junit allowEmptyResults: true, testResults: 'tests/**/TestResults.trx'
      }
    }
  }
}
